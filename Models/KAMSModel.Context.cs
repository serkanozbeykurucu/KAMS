//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KAMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbApartmantManagamentSystemsEntities2 : DbContext
    {
        public DbApartmantManagamentSystemsEntities2()
            : base("name=DbApartmantManagamentSystemsEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AMU> AMU { get; set; }
        public virtual DbSet<ApartmanAidat> ApartmanAidat { get; set; }
        public virtual DbSet<ApartmanCasa> ApartmanCasa { get; set; }
        public virtual DbSet<ApartmanExpense> ApartmanExpense { get; set; }
        public virtual DbSet<ApartmanRevenue> ApartmanRevenue { get; set; }
        public virtual DbSet<ApartmantBlocs> ApartmantBlocs { get; set; }
        public virtual DbSet<ApartmantDetails> ApartmantDetails { get; set; }
        public virtual DbSet<CITY> CITY { get; set; }
        public virtual DbSet<COUNTRY> COUNTRY { get; set; }
        public virtual DbSet<DAIRELER> DAIRELER { get; set; }
        public virtual DbSet<DISTRICTS> DISTRICTS { get; set; }
        public virtual DbSet<EXPENSETYPE> EXPENSETYPE { get; set; }
        public virtual DbSet<KATLAR> KATLAR { get; set; }
        public virtual DbSet<recovaryUsers> recovaryUsers { get; set; }
        public virtual DbSet<RESIDENT> RESIDENT { get; set; }
        public virtual DbSet<ResidentAccount> ResidentAccount { get; set; }
        public virtual DbSet<ResidentExpense> ResidentExpense { get; set; }
        public virtual DbSet<ResidentRevenus> ResidentRevenus { get; set; }
        public virtual DbSet<REVUNUETYPE> REVUNUETYPE { get; set; }
        public virtual DbSet<TOWNS> TOWNS { get; set; }
        public virtual DbSet<USERS> USERS { get; set; }
        public virtual DbSet<YETKILER> YETKILER { get; set; }
        public virtual DbSet<C_ApartmanManagementResident> C_ApartmanManagementResident { get; set; }
        public virtual DbSet<C_ApartmantDetailView> C_ApartmantDetailView { get; set; }
        public virtual DbSet<C_UserYetkiView> C_UserYetkiView { get; set; }
        public virtual DbSet<View_1> View_1 { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<C_ViewTest> C_ViewTest { get; set; }
        public virtual DbSet<Images> Images { get; set; }
        public virtual DbSet<C_ResidentAccountDetailView> C_ResidentAccountDetailView { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CursorRecovaryUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CursorRecovaryUsers");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_UserAdd(string uSERNAME, string p_PASSWORD, string p_NAME, string p_SURNAME, Nullable<int> cOUNTRY, Nullable<int> cITY, Nullable<int> tOWNS, Nullable<int> dISTRICT, string p_ADDRESS, string gENDER, string email, string tELEPHONE, Nullable<int> yETKIID)
        {
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var p_PASSWORDParameter = p_PASSWORD != null ?
                new ObjectParameter("p_PASSWORD", p_PASSWORD) :
                new ObjectParameter("p_PASSWORD", typeof(string));
    
            var p_NAMEParameter = p_NAME != null ?
                new ObjectParameter("p_NAME", p_NAME) :
                new ObjectParameter("p_NAME", typeof(string));
    
            var p_SURNAMEParameter = p_SURNAME != null ?
                new ObjectParameter("p_SURNAME", p_SURNAME) :
                new ObjectParameter("p_SURNAME", typeof(string));
    
            var cOUNTRYParameter = cOUNTRY.HasValue ?
                new ObjectParameter("COUNTRY", cOUNTRY) :
                new ObjectParameter("COUNTRY", typeof(int));
    
            var cITYParameter = cITY.HasValue ?
                new ObjectParameter("CITY", cITY) :
                new ObjectParameter("CITY", typeof(int));
    
            var tOWNSParameter = tOWNS.HasValue ?
                new ObjectParameter("TOWNS", tOWNS) :
                new ObjectParameter("TOWNS", typeof(int));
    
            var dISTRICTParameter = dISTRICT.HasValue ?
                new ObjectParameter("DISTRICT", dISTRICT) :
                new ObjectParameter("DISTRICT", typeof(int));
    
            var p_ADDRESSParameter = p_ADDRESS != null ?
                new ObjectParameter("p_ADDRESS", p_ADDRESS) :
                new ObjectParameter("p_ADDRESS", typeof(string));
    
            var gENDERParameter = gENDER != null ?
                new ObjectParameter("GENDER", gENDER) :
                new ObjectParameter("GENDER", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var tELEPHONEParameter = tELEPHONE != null ?
                new ObjectParameter("TELEPHONE", tELEPHONE) :
                new ObjectParameter("TELEPHONE", typeof(string));
    
            var yETKIIDParameter = yETKIID.HasValue ?
                new ObjectParameter("YETKIID", yETKIID) :
                new ObjectParameter("YETKIID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserAdd", uSERNAMEParameter, p_PASSWORDParameter, p_NAMEParameter, p_SURNAMEParameter, cOUNTRYParameter, cITYParameter, tOWNSParameter, dISTRICTParameter, p_ADDRESSParameter, gENDERParameter, emailParameter, tELEPHONEParameter, yETKIIDParameter);
        }
    
        public virtual int sp_UserDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserDelete", iDParameter);
        }
    
        public virtual ObjectResult<sp_UserSearch_Result> sp_UserSearch(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserSearch_Result>("sp_UserSearch", iDParameter);
        }
    
        public virtual int sp_UserUpdate(Nullable<int> iD, string uSERNAME)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserUpdate", iDParameter, uSERNAMEParameter);
        }
    }
}
